# ========================================================
# Start-IntelliLab.ps1 - Advanced launcher with health checks
# Generated by VS Code AI agent - DO NOT manually edit
# ========================================================

param(
    [switch]$SkipBrowser,
    [switch]$Verbose
)

# === DISCOVERED CONFIGURATION ===
$Config = @{
    ApiPort = 8000
    FePort = 5173
    BackendPath = ".\backend"
    FrontendPath = ".\frontend"
    PythonExe = ".\venv\Scripts\python.exe"
    UvicornTarget = "main:app"
    HealthEndpoint = "/api/health"
    MaxWaitSeconds = 30
}

$Config.ApiUrl = "http://localhost:$($Config.ApiPort)"
$Config.FeUrl = "http://localhost:$($Config.FePort)"
$Config.HealthUrl = "$($Config.ApiUrl)$($Config.HealthEndpoint)"

function Write-TimestampLog {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "HH:mm:ss"
    $color = switch ($Level) {
        "INFO" { "Cyan" }
        "SUCCESS" { "Green" }
        "WARNING" { "Yellow" }
        "ERROR" { "Red" }
        default { "White" }
    }
    Write-Host "[$timestamp] [$Level] $Message" -ForegroundColor $color
}

function Test-PortInUse {
    param([int]$Port)
    try {
        $listener = [System.Net.NetworkInformation.IPGlobalProperties]::GetIPGlobalProperties().GetActiveTcpListeners()
        return $listener | Where-Object { $_.Port -eq $Port }
    }
    catch {
        return $false
    }
}

function Get-ProcessUsingPort {
    param([int]$Port)
    try {
        $netstat = netstat -ano | Select-String ":$Port "
        if ($netstat) {
            $pid = ($netstat -split '\s+')[-1]
            return Get-Process -Id $pid -ErrorAction SilentlyContinue
        }
    }
    catch {
        return $null
    }
    return $null
}

function Test-Dependencies {
    Write-TimestampLog "Checking dependencies..."
    
    # Check Python venv
    if (-not (Test-Path $Config.PythonExe)) {
        Write-TimestampLog "Python virtual environment not found at $($Config.PythonExe)" "ERROR"
        Write-TimestampLog "FIX: Run 'python -m venv venv' then '.\venv\Scripts\pip install -r requirements.txt'" "ERROR"
        return $false
    }
    
    # Check Node.js
    try {
        $null = Get-Command node -ErrorAction Stop
    }
    catch {
        Write-TimestampLog "Node.js not found in PATH" "ERROR"
        Write-TimestampLog "FIX: Install Node.js from https://nodejs.org/" "ERROR"
        return $false
    }
    
    # Check frontend dependencies
    if (-not (Test-Path "$($Config.FrontendPath)\node_modules")) {
        Write-TimestampLog "Frontend dependencies not installed" "ERROR"
        Write-TimestampLog "FIX: Run 'cd frontend && npm install'" "ERROR"
        return $false
    }
    
    Write-TimestampLog "All dependencies OK" "SUCCESS"
    return $true
}

function Test-PortsAvailable {
    Write-TimestampLog "Checking port availability..."
    
    $apiPortInUse = Test-PortInUse -Port $Config.ApiPort
    $fePortInUse = Test-PortInUse -Port $Config.FePort
    
    if ($apiPortInUse) {
        $process = Get-ProcessUsingPort -Port $Config.ApiPort
        if ($process) {
            Write-TimestampLog "Port $($Config.ApiPort) is in use by process: $($process.ProcessName) (PID: $($process.Id))" "ERROR"
            Write-TimestampLog "FIX: Run 'Stop-IntelliLab.bat' or kill PID $($process.Id)" "ERROR"
        } else {
            Write-TimestampLog "Port $($Config.ApiPort) is in use by unknown process" "ERROR"
        }
        return $false
    }
    
    if ($fePortInUse) {
        $process = Get-ProcessUsingPort -Port $Config.FePort
        if ($process) {
            Write-TimestampLog "Port $($Config.FePort) is in use by process: $($process.ProcessName) (PID: $($process.Id))" "ERROR"
            Write-TimestampLog "FIX: Run 'Stop-IntelliLab.bat' or kill PID $($process.Id)" "ERROR"
        } else {
            Write-TimestampLog "Port $($Config.FePort) is in use by unknown process" "ERROR"
        }
        return $false
    }
    
    Write-TimestampLog "Ports $($Config.ApiPort) and $($Config.FePort) are available" "SUCCESS"
    return $true
}

function Set-FrontendEnvironment {
    Write-TimestampLog "Configuring frontend environment..."
    $envContent = "VITE_API_URL=$($Config.ApiUrl)"
    $envPath = "$($Config.FrontendPath)\.env.local"
    
    try {
        Set-Content -Path $envPath -Value $envContent -Force
        Write-TimestampLog "Created $envPath with VITE_API_URL=$($Config.ApiUrl)" "SUCCESS"
        return $true
    }
    catch {
        Write-TimestampLog "Failed to create frontend environment file: $_" "ERROR"
        return $false
    }
}

function Start-BackendServer {
    Write-TimestampLog "Starting IntelliLab GC API Server..."
    
    $arguments = @(
        "-m", "uvicorn", 
        $Config.UvicornTarget,
        "--reload",
        "--host", "0.0.0.0",
        "--port", $Config.ApiPort
    )
    
    try {
        $process = Start-Process -FilePath $Config.PythonExe -ArgumentList $arguments -WindowStyle Normal -WorkingDirectory $Config.BackendPath -PassThru
        $script:BackendProcess = $process
        Write-TimestampLog "Backend server started (PID: $($process.Id))" "SUCCESS"
        return $true
    }
    catch {
        Write-TimestampLog "Failed to start backend server: $_" "ERROR"
        return $false
    }
}

function Start-FrontendServer {
    Write-TimestampLog "Starting IntelliLab GC Frontend..."
    
    try {
        $process = Start-Process -FilePath "cmd.exe" -ArgumentList "/k", "npm run dev" -WindowStyle Normal -WorkingDirectory $Config.FrontendPath -PassThru
        $script:FrontendProcess = $process
        Write-TimestampLog "Frontend server started (PID: $($process.Id))" "SUCCESS"
        return $true
    }
    catch {
        Write-TimestampLog "Failed to start frontend server: $_" "ERROR"
        return $false
    }
}

function Wait-ForService {
    param(
        [string]$Url,
        [string]$ServiceName,
        [int]$TimeoutSeconds = 30,
        [string]$ExpectedContent = $null
    )
    
    Write-TimestampLog "Waiting for $ServiceName to be ready at $Url..."
    $stopwatch = [System.Diagnostics.Stopwatch]::StartNew()
    
    do {
        try {
            $response = Invoke-WebRequest -Uri $Url -TimeoutSec 5 -UseBasicParsing
            
            if ($response.StatusCode -eq 200) {
                if ($ExpectedContent) {
                    if ($response.Content -like "*$ExpectedContent*") {
                        Write-TimestampLog "$ServiceName is ready! (took $($stopwatch.Elapsed.TotalSeconds.ToString('F1'))s)" "SUCCESS"
                        return $true
                    }
                } else {
                    Write-TimestampLog "$ServiceName is ready! (took $($stopwatch.Elapsed.TotalSeconds.ToString('F1'))s)" "SUCCESS"
                    return $true
                }
            }
        }
        catch {
            if ($Verbose) {
                Write-TimestampLog "$ServiceName check failed: $($_.Exception.Message)" "WARNING"
            }
        }
        
        Start-Sleep -Seconds 2
    } while ($stopwatch.Elapsed.TotalSeconds -lt $TimeoutSeconds)
    
    Write-TimestampLog "$ServiceName failed to respond within $TimeoutSeconds seconds" "ERROR"
    return $false
}

# === MAIN EXECUTION ===
try {
    Write-Host ""
    Write-Host "========================================================" -ForegroundColor Green
    Write-Host "   IntelliLab GC - Advanced Startup (PowerShell)" -ForegroundColor Green
    Write-Host "========================================================" -ForegroundColor Green
    Write-Host "   Frontend: $($Config.FeUrl)" -ForegroundColor Cyan
    Write-Host "   Backend:  $($Config.ApiUrl)" -ForegroundColor Cyan
    Write-Host "   API Docs: $($Config.ApiUrl)/docs" -ForegroundColor Cyan
    Write-Host "========================================================" -ForegroundColor Green
    Write-Host ""
    
    # Dependency checks
    if (-not (Test-Dependencies)) {
        exit 1
    }
    
    # Auto-clear ports using absolute path to Stop script
    Write-TimestampLog "Freeing ports $($Config.ApiPort) and $($Config.FePort) (if occupied)..." "INFO"
    $ErrorActionPreference = "Continue"
    $Root = Split-Path -Parent $MyInvocation.MyCommand.Path
    $StopBat = Join-Path $Root "Stop-IntelliLab.bat"
    
    if (Test-Path $StopBat) {
        try {
            $stopProcess = Start-Process -FilePath $StopBat -Wait -PassThru -WindowStyle Hidden
            if ($stopProcess.ExitCode -eq 0) {
                Write-TimestampLog "Port cleanup completed successfully" "SUCCESS"
            }
        }
        catch {
            Write-TimestampLog "Port cleanup encountered an issue, but continuing..." "WARNING"
        }
    }
    $ErrorActionPreference = "Stop"
    
    # Set up frontend environment
    if (-not (Set-FrontendEnvironment)) {
        exit 1
    }
    
    # Start backend
    if (-not (Start-BackendServer)) {
        exit 1
    }
    
    # Start frontend
    if (-not (Start-FrontendServer)) {
        exit 1
    }
    
    # Wait for backend to be ready
    $backendReady = Wait-ForService -Url $Config.HealthUrl -ServiceName "Backend API" -TimeoutSeconds $Config.MaxWaitSeconds -ExpectedContent "healthy"
    
    # Wait for frontend to be ready
    $frontendReady = Wait-ForService -Url $Config.FeUrl -ServiceName "Frontend" -TimeoutSeconds $Config.MaxWaitSeconds
    
    if ($backendReady -and $frontendReady) {
        Write-Host ""
        Write-Host "âœ… READY - Both services are running!" -ForegroundColor Green
        Write-Host "   Frontend: $($Config.FeUrl)" -ForegroundColor Cyan
        Write-Host "   Backend:  $($Config.ApiUrl)" -ForegroundColor Cyan
        Write-Host "   API Docs: $($Config.ApiUrl)/docs" -ForegroundColor Cyan
        Write-Host ""
        
        if (-not $SkipBrowser) {
            Write-TimestampLog "Opening browser..."
            Start-Process $Config.FeUrl
        }
        
        Write-Host "Press any key to continue (services will keep running)..." -ForegroundColor Yellow
        $null = $Host.UI.RawUI.ReadKey("NoEcho,IncludeKeyDown")
    }
    else {
        Write-TimestampLog "Service startup failed - check the service windows for details" "ERROR"
        exit 1
    }
}
catch {
    Write-TimestampLog "Unexpected error: $_" "ERROR"
    exit 1
}